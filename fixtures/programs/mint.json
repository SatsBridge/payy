{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":13510857730694851881,"abi":{"parameters":[{"name":"notes","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"common::Note","fields":[{"name":"kind","type":{"kind":"field"}},{"name":"value","type":{"kind":"field"}},{"name":"address","type":{"kind":"field"}},{"name":"psi","type":{"kind":"field"}}]}},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"public"},{"name":"kind","type":{"kind":"field"},"visibility":"public"},{"name":"hash","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{"1714809443410094063":{"error_kind":"string","string":"Padding notes must be zero value"},"3717803266266687489":{"error_kind":"string","string":"Mint hash is invalid"},"10904885587455494063":{"error_kind":"string","string":"Kind 1 does not match"},"16126182560927388033":{"error_kind":"string","string":"Value is not correct"},"17732794540348461910":{"error_kind":"string","string":"Kind 2 does not match"}}},"bytecode":"H4sIAAAAAAAA/9VYO0/DMBC+JJTyhr5oKe83DEhxk9CEqTNiBUZERfkDIHZWFkZAYkdigInfwAAbP4CVDbEwImxhw+G0S3tG9KSTT77k8t199smOBV+yzLUg7Q45WhAXNVeRo9uaMMJYLsbbaxJwr4G4fSiW5676fq1cqjGP7bqlqBoGrh9UV0MWsiAM9kqh59VCPyxH1ajsRsz3amw/iLx9GcxU3n2owERxjWC1DGJttK5a5ay/eZy+PiGwpSG+kT+kbSHbRna/tNV7A1wHuQ5xTaF5JQ4xbw5hrAFCbtJA26R0btKIg0FkDyE7pXGT4ZrlmuM6LOf/snF3gJnGnTcJOG8gbgH+d+MWeRdQgYniGsGaMIS13qYTttpcCWR3QuOGOMK1yHWU6xiYb4hJwlgjhOt0HMxyM444KCJ7FNljGjcTXCe5TnGdhngzrBDlLg4WovnaxFxnCDHOgNl93iq+guSLuoYThBhnoT0OjnNtgnO+eZwlfaJezxBrXvWGWWTPIXsefveMBa6LXJfg6was93ObuAY9dFyxBUO8O8Q5W4SxEoT16zJUP+qeRslFN3HOJnKlPE+rsy/1PqbMmfoipXpYF/yIuug70i/2kTjnJuFnv4vnxfroQe91Ils993r1dlBce8wj1/fftnq+rMLwcnm0s37uYV9Ojseple2Lu4dn7BuW4+396cb16+YZ9qkPbD0dXt6c5N8B5QkyDzzmkJ/yJ0O3niNtfDcJcclBvLYKh418FSIMKp7iPwFxsTUfXlMYn0WPj+lYnDrfUpKRYxbNqXp+Akjh5DcKFwAA","debug_symbols":"7VfbioMwEP2XPPuQmcnF+CvLUmxriyBarF1YSv99tRg3tcHCimxbfZzMmcOcg04mZ7ZN1qf9Ks13xZFFH2eWFZu4Sou8js6MX4+OhzhvomMVlxWLQMuAJfmWRcjFJWC7NEtYpMwluIMKgBYqUP5CxeUzYDAhN07ITWO5hbDc0vS4xUhuiaaFKq5d7nsoSdVJ5B0UlQeKaNB2QFwOg4HAgoEIHoA52IaBq9AF127IxQ3HDfWcbuiuZ9REDwRqbYlBGznGDb244bgR+txA5LYXYf4+78yE3MCnJIex5AOTGnAk+XsNJ6DntOOf/kcQix2uHd6bHLX9+gho2I5X0KhmoFHPQGM4A43m/TWid7Ug1FajuNkQmwrvvkAhdlKxX+FdAoSyY16E0K/w3pNS2kVDanlTUQfrMs2ydL9yH+b18VdcpvE6S9pwd8o3Trb6PtiMrT+UxSbZnsqkYbrmavof","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"64":{"source":"use std::hash::poseidon2;\n\npub struct Note {\n    pub kind: Field,\n    pub value: Field,\n    pub address: Field,\n    pub psi: Field,\n}\n\npub struct InputNote {\n    pub note: Note,\n    pub secret_key: Field,\n}\n\npub fn check_commitment(note: Note, commitment: Field) {\n    assert(get_note_commitment(note) == commitment, \"Note commitment is not valid\");\n}\n\npub fn get_note_commitment(note: Note) -> Field {\n    if (note.kind == 0) {\n        assert(note.value == 0, \"Padding notes must be zero value\");\n        0\n    } else {\n        poseidon2::Poseidon2::hash([note.kind, note.value, note.address, note.psi], 4)\n    }\n}\n\npub fn get_address(secret_key: Field) -> Field {\n    poseidon2::Poseidon2::hash([secret_key, 0], 2)\n}\n\npub fn check_input_note_ownership(input_note: InputNote) {\n    if (input_note.note.value != 0) {\n        assert(\n            get_address(input_note.secret_key) == input_note.note.address,\n            \"Input note is not owned by the owner\",\n        );\n    }\n}\n\npub fn slice<let N: u32, let L: u32>(bytes: [u8; N], start: u32) -> [u8; L] {\n    let end = start + L;\n    assert(end <= N, \"slice: slice end out of bounds\");\n    let mut result = [bytes[0]; L];\n    for i in 0..L {\n        result[i] = bytes[start + i];\n    }\n    result\n}\n\npub fn field_from_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        as_field += (bytes[i] as Field) * offset;\n        offset *= 256;\n    }\n    as_field\n}\n","path":"/Users/hwq/Documents/polybase/zk-rollup/noir/common/src/lib.nr"},"69":{"source":"use common::{get_address, get_note_commitment, Note};\nuse std::hash::poseidon2;\n\nfn main(notes: [Note; 2], value: pub Field, kind: pub Field, hash: pub Field) {\n    let cm1 = get_note_commitment(notes[0]);\n    let cm2 = get_note_commitment(notes[1]);\n\n    let calc_hash = poseidon2::Poseidon2::hash([cm1, cm2], 2);\n\n    assert(calc_hash == hash, \"Mint hash is invalid\");\n    assert(value == notes[0].value + notes[1].value, \"Value is not correct\");\n    assert(notes[0].kind == kind, \"Kind 1 does not match\");\n    if (notes[1].kind != 0) {\n        assert(notes[1].kind == kind, \"Kind 2 does not match\");\n    }\n}\n\n#[test]\nfn test_mint() {\n    let pk = 101;\n    let address = get_address(pk);\n\n    let note1 = Note { value: 100, address, kind: 1, psi: 1 };\n\n    let note2 = Note { value: 50, address, kind: 1, psi: 2 };\n\n    let cm1 = get_note_commitment(note1);\n    let cm2 = get_note_commitment(note2);\n\n    let hash = poseidon2::Poseidon2::hash([cm1, cm2], 2);\n    let total_value = note1.value + note2.value;\n\n    main([note1, note2], total_value, 1, hash);\n}\n","path":"/Users/hwq/Documents/polybase/zk-rollup/noir/mint/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert"]}